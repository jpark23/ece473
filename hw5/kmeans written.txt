def update_mu(ass, phi_x):
    mu1_vals = []
    mu2_vals = []
    numu1 = 0
    numu2 = 0
    for i in range(len(phi_x)):
        if ass[i]:
            mu1_vals.append(phi_x[i])
        else:
            mu2_vals.append(phi_x[i])
    numu1_x = mu1_vals[0][0] + mu1_vals[1][0]
    numu1_y = mu1_vals[0][1] + mu1_vals[1][1]
    numu2_x = mu2_vals[0][0] + mu2_vals[1][0]
    numu2_y = mu2_vals[0][1] + mu2_vals[1][1]
        
    return [numu1_x/2, numu1_y/2], [numu2_x/2, numu2_y/2]
    
def fill_ass(d1, d2, ass): 
    for i in range(len(d1)):
        if (d1[i] >= d2[i]):
            ass[i] = 0
        elif (d1[i] < d2[i]):
            ass[i] = 1

def fill_dist(d1, d2, phi_x, mu_1, mu_2):
    def euc_dist(p,q):
        return sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))
    for i in range(len(phi_x)):
        d1[i] = euc_dist(phi_x[i], mu_1)
        d2[i] = euc_dist(phi_x[i], mu_2)

phi_x = [[1,0], [1,2], [3,0], [2,2]]
mu_1 = [0,1]
mu_2 = [3,2]
d1 = [0,0,0,0]
d2 = [0,0,0,0]
ass = [-1,-1,-1,-1] 

i = 0
while(1):
    fill_dist(d1, d2, phi_x, mu_1, mu_2)
    print("mu1 = "+str(mu_1)+", "+" mu2 = "+str(mu_2))
    print("d1 = "+str(d1))
    print("d2 = "+str(d2))
    print("ass = "+str(ass))
    fill_ass(d1, d2, ass)
    numu_1, numu_2 = update_mu(ass, phi_x)
    print("new mu1: "+str(numu_1)+", "+"new mu2: "+str(numu_2))
    if numu_1 == mu_1 and numu_2 == mu_2:
        print("\n")
        print("iterations: "+str(i+1))
        print("final mu1: "+str(numu_1))
        print("final mu2: "+str(numu_2))
        break
    else: 
        i += 1
        mu_1 = numu_1
        mu_2 = numu_2
        print("\n")
